{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"../../utils/firebase\";\nvar FETCH_ALL_BOOKINGS = 'FETCH_ALL_BOOKINGS';\nvar FETCH_UNAVAILABLE_RESTAURANT_TIMES = 'FETCH_UNAVAILABLE_RESTAURANT_TIMES';\nvar POST_BOOKING = 'POST_BOOKING';\nexport var fetchAllBookings = function fetchAllBookings() {\n  return function _callee(dispatch) {\n    var bookings;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(firebase.firestore().collection('bookings'));\n\n          case 2:\n            bookings = _context.sent;\n            bookings.get().then(function (querySnapshot) {\n              var bookingArray = querySnapshot.docs.map(function (doc) {\n                return _objectSpread(_objectSpread({}, doc.data()), {}, {\n                  id: doc.id\n                });\n              });\n              dispatch({\n                type: FETCH_ALL_BOOKINGS,\n                payload: bookingArray\n              });\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchUnavailableFromRestaurant = function fetchUnavailableFromRestaurant(resID, date) {\n  return function _callee2(dispatch) {\n    var bookings;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(firebase.firestore().collection('times').where('restId', '==', resID).get().then(function (querySnapshot) {\n              var timesArray = querySnapshot.docs.map(function (doc) {\n                return _objectSpread({}, doc.data());\n              });\n              console.log(timesArray[0].unavailable[date]);\n              dispatch({\n                type: FETCH_UNAVAILABLE_RESTAURANT_TIMES,\n                payload: timesArray[0].unavailable[date]\n              });\n            }));\n\n          case 2:\n            bookings = _context2.sent;\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/Bengel/Documents/eatin/src/store/actions/bookings.js"],"names":["firebase","FETCH_ALL_BOOKINGS","FETCH_UNAVAILABLE_RESTAURANT_TIMES","POST_BOOKING","fetchAllBookings","dispatch","firestore","collection","bookings","get","then","querySnapshot","bookingArray","docs","map","doc","data","id","type","payload","fetchUnavailableFromRestaurant","resID","date","where","timesArray","console","log","unavailable"],"mappings":";;;;;;;AAAA,OAAOA,QAAP;AAEA,IAAMC,kBAAkB,GAAG,oBAA3B;AACA,IAAMC,kCAAkC,GAAG,oCAA3C;AACA,IAAMC,YAAY,GAAG,cAArB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBL,QAAQ,CAACM,SAAT,GAAqBC,UAArB,CAAgC,UAAhC,CADlB;;AAAA;AACCC,YAAAA,QADD;AAELA,YAAAA,QAAQ,CAACC,GAAT,GAAeC,IAAf,CAAoB,UAACC,aAAD,EAAmB;AACrC,kBAAMC,YAAY,GAAGD,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuB,UAACC,GAAD,EAAS;AACnD,uDAAYA,GAAG,CAACC,IAAJ,EAAZ;AAAwBC,kBAAAA,EAAE,EAAEF,GAAG,CAACE;AAAhC;AACD,eAFoB,CAArB;AAGAZ,cAAAA,QAAQ,CAAC;AAAEa,gBAAAA,IAAI,EAAEjB,kBAAR;AAA4BkB,gBAAAA,OAAO,EAAEP;AAArC,eAAD,CAAR;AACD,aALD;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASD,CAVM;AAYP,OAAO,IAAMQ,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAC7D,SAAO,kBAAMjB,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACkBL,QAAQ,CAACM,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCgB,KAAzC,CAA+C,QAA/C,EAAyD,IAAzD,EAAgEF,KAAhE,EAAuEZ,GAAvE,GAA6EC,IAA7E,CAAkF,UAACC,aAAD,EAAmB;AAC1H,kBAAMa,UAAU,GAAGb,aAAa,CAACE,IAAd,CAAmBC,GAAnB,CAAuB,UAACC,GAAD,EAAS;AACjD,yCAAYA,GAAG,CAACC,IAAJ,EAAZ;AACD,eAFkB,CAAnB;AAGAS,cAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAAC,CAAD,CAAV,CAAcG,WAAd,CAA0BL,IAA1B,CAAZ;AACAjB,cAAAA,QAAQ,CAAC;AAAEa,gBAAAA,IAAI,EAAEhB,kCAAR;AAA4CiB,gBAAAA,OAAO,EAAEK,UAAU,CAAC,CAAD,CAAV,CAAcG,WAAd,CAA0BL,IAA1B;AAArD,eAAD,CAAR;AACD,aANsB,CADlB;;AAAA;AACCd,YAAAA,QADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASD,CAVM","sourcesContent":["import firebase from 'src/utils/firebase'\r\n\r\nconst FETCH_ALL_BOOKINGS = 'FETCH_ALL_BOOKINGS';\r\nconst FETCH_UNAVAILABLE_RESTAURANT_TIMES = 'FETCH_UNAVAILABLE_RESTAURANT_TIMES';\r\nconst POST_BOOKING = 'POST_BOOKING';\r\n\r\nexport const fetchAllBookings = () => {\r\n  return async dispatch => {\r\n    const bookings = await firebase.firestore().collection('bookings')\r\n    bookings.get().then((querySnapshot) => {\r\n      const bookingArray = querySnapshot.docs.map((doc) => {\r\n        return { ...doc.data(), id: doc.id }\r\n      })\r\n      dispatch({ type: FETCH_ALL_BOOKINGS, payload: bookingArray })\r\n    })\r\n  }\r\n};\r\n\r\nexport const fetchUnavailableFromRestaurant = (resID, date) => {\r\n  return async dispatch => {\r\n    const bookings = await firebase.firestore().collection('times').where('restId', '==' , resID).get().then((querySnapshot) => {\r\n      const timesArray = querySnapshot.docs.map((doc) => {\r\n        return { ...doc.data()}\r\n      })\r\n      console.log(timesArray[0].unavailable[date])\r\n      dispatch({ type: FETCH_UNAVAILABLE_RESTAURANT_TIMES, payload: timesArray[0].unavailable[date] })\r\n    })\r\n  }\r\n};\r\n\r\n/*\r\nexport const postBooking = (resID, date) => {\r\n  return async dispatch => {\r\n      dispatch({ type: FETCH_UNAVAILABLE_RESTAURANT_TIMES, payload: timesArray[0].unavailable[date] })\r\n    })\r\n  }\r\n};\r\n*/"]},"metadata":{},"sourceType":"module"}